pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' 
    }
  }
  stages {

    stage('Checkout') {
      steps {
        sh 'echo passed'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://52.3.252.237:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarQube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh ' mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push the Docker Image') {
      environment {

        DOCKER_IMAGE = "asmaezaidi/azed02-devops-pipeline:${BUILD_NUMBER}" 
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {

          sh 'docker build -t ${DOCKER_IMAGE} .'
          

          def dockerImage = docker.image("${DOCKER_IMAGE}")

          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {

              dockerImage.push()
          }
        }
      }
}
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "pipeRgo"
            GIT_USER_NAME = "Azed02"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "zaidiasmae2002@gmail.com"
                    git config user.name "Asmae ZAIDI"
                    git checkout main
                    git add .
                    git commit -m "commit locally" || true
                    git pull origin main --allow-unrelated-histories
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/ImageTag/${BUILD_NUMBER}/g" k8s/deployment.yaml
                    git clean -fd
                    if [[ -n "$(git status --porcelain)" ]]; then
                        git add k8s/deployment.yaml
                        git commit -am "Update image version to ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        echo 'Deployment file updated successfully!'
                    else
                        echo 'No changes to commit.'
                    fi
                '''
            }
        }
    }
  }
}
